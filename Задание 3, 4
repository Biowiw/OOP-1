class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}
        
    def rate_lecture(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in lecturer.courses_attached and course in self.courses_in_progress and 1 <= grade <= 10:
            if course in lecturer.lecture_grades:
                lecturer.lecture_grades[course] += [grade]
            else:
                lecturer.lecture_grades[course] = [grade]
        else:
            return 'Ошибка'
        
    def average_grade(self):
        if not self.grades:
            return 0.0
        all_grades = [grade for grades in self.grades.values() for grade in grades]
        return sum(all_grades) / len(all_grades)

    def __str__(self):
        return f'Имя: {self.name} \nФамилия: {self.surname} \nСредняя оценка за домашние задания: {self.average_grade} \nКурсы в процессе изучения: {self.courses_in_progress} \nЗавершенные курсы: {self.finished_courses}'
    
    def eq(self, other):
        if not isinstance(other, Student):
            return 'Ошибка'
        return self.average_grade() == other.average_grade()
    
    def lt(self, other):
        if not isinstance(other, Student):
            return 'Ошибка'
        return self.average_grade() < other.average_grade()
    
class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []
        
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'
 
class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.lecture_grades = {}

    def average_lecture_grade(self):
        if not self.lecture_grades:
            return 0.0
        all_grades = [grade for grades in self.lecture_grades.values() for grade in grades]
        return sum(all_grades) / len(all_grades)

    def __str__(self):
        return f'Имя: {self.name} \nФамилия: {self.surname} \nСредняя оценка за лекции: {self.average_lecture_grade}'

    def __eq__(self, other):
        if not isinstance(other, Lecturer):
            return 'Ошибка'
        return self.average_lecture_grade == other.average_lecture_grade
    
    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            return 'Ошибка'
        return self.average_lecture_grade() < other.average_lecture_grade()

class Reviewer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)

    def __str__(self):
        return f'Имя: {self.name} \nФамилия: {self.surname}'

student1 = Student('Иван', 'Иванов', 'М')  
student1.courses_in_progress += ['Python', 'Git']
student1.finished_courses = ['Введение в программирование']
student2 = Student('Кирилл', 'Кириллов', 'М')
student2.courses_in_progress += ['Python', 'Java']
student2.finished_courses = ['Введение в программирование', 'Git']
lecturer1 = Lecturer('Алексей', 'Шальнов')
lecturer1.courses_attached += ['Python', 'C++']
lecturer2 = Lecturer('Андрей', 'Андреев')
lecturer2.courses_attached += ['Git', 'Java']
reviewer1 = Reviewer('Александр', 'Якушев')
reviewer1.courses_attached += ['Python', 'Java', 'C++']
reviewer2 = Reviewer('Илья', 'Макаров')
reviewer2.courses_attached += ['Git']
student1.grades = {'Git': [10, 10, 8, 9, 10]}
student1.grades = {'Python': [8, 9, 9]}
lecturer1.lecture_grades = {'C++': [10, 10, 10, 10, 9]}
lecturer1.lecture_grades = {'Python': [10, 10, 9, 10]}
student2.grades = {'Java': [10, 9, 7, 8, 9]}
student2.grades = {'Python': [10, 10]}
lecturer2.lecture_grades = {'Git': [10, 10, 10, 10, 10]}
lecturer2.lecture_grades = {'Java': [10, 10, 10, 10]}

print(reviewer1)
print(reviewer2)
print(lecturer1)
print(lecturer2)
print(student1)
print(student2)

print(student1 == student2)
print(lecturer1 == lecturer2)
print(student1 < student2)
print(lecturer1 < lecturer2)
